//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Lander"",
            ""id"": ""9345adb9-e716-400e-81f8-7d68afcd2587"",
            ""actions"": [
                {
                    ""name"": ""ThrustUp"",
                    ""type"": ""Value"",
                    ""id"": ""82ff6654-7221-4314-b98b-f455ea0ee10c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""AxisDeadzone(min=0.05,max=0.975)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ThrustLeft"",
                    ""type"": ""Value"",
                    ""id"": ""10168d13-100d-4e7f-acef-3730445eae71"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Invert,AxisDeadzone(min=0.075,max=0.95)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ThrustRight"",
                    ""type"": ""Value"",
                    ""id"": ""d4875293-4c7e-46e0-8f63-ae2bb7cc54d8"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""AxisDeadzone(min=0.075,max=0.95)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BackToMenu"",
                    ""type"": ""Value"",
                    ""id"": ""7ffbf613-0a2a-4227-8383-c9a9878d738e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""397159aa-5b71-4da1-b04f-a7d5be56d57f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ThrustUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d936c11-b9b4-4966-ad20-431d7dfbec4f"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ThrustUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22f5a545-8d8e-4e4c-898b-7dfd14f7ea5b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ThrustLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d210ae08-bc9b-4dd3-9731-04fca36a8894"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ThrustLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e988911f-286e-43fc-8c6c-1308368c9424"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ThrustRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d9a4531-852e-4106-8b62-e7a2d711f3ed"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ThrustRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11b98379-18ba-4512-a81a-eec3553b795a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""BackToMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ae663da-5fa0-4138-aed6-9f8cbe808c5c"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""BackToMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Lander
        m_Lander = asset.FindActionMap("Lander", throwIfNotFound: true);
        m_Lander_ThrustUp = m_Lander.FindAction("ThrustUp", throwIfNotFound: true);
        m_Lander_ThrustLeft = m_Lander.FindAction("ThrustLeft", throwIfNotFound: true);
        m_Lander_ThrustRight = m_Lander.FindAction("ThrustRight", throwIfNotFound: true);
        m_Lander_BackToMenu = m_Lander.FindAction("BackToMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Lander
    private readonly InputActionMap m_Lander;
    private ILanderActions m_LanderActionsCallbackInterface;
    private readonly InputAction m_Lander_ThrustUp;
    private readonly InputAction m_Lander_ThrustLeft;
    private readonly InputAction m_Lander_ThrustRight;
    private readonly InputAction m_Lander_BackToMenu;
    public struct LanderActions
    {
        private @PlayerInputActions m_Wrapper;
        public LanderActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ThrustUp => m_Wrapper.m_Lander_ThrustUp;
        public InputAction @ThrustLeft => m_Wrapper.m_Lander_ThrustLeft;
        public InputAction @ThrustRight => m_Wrapper.m_Lander_ThrustRight;
        public InputAction @BackToMenu => m_Wrapper.m_Lander_BackToMenu;
        public InputActionMap Get() { return m_Wrapper.m_Lander; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LanderActions set) { return set.Get(); }
        public void SetCallbacks(ILanderActions instance)
        {
            if (m_Wrapper.m_LanderActionsCallbackInterface != null)
            {
                @ThrustUp.started -= m_Wrapper.m_LanderActionsCallbackInterface.OnThrustUp;
                @ThrustUp.performed -= m_Wrapper.m_LanderActionsCallbackInterface.OnThrustUp;
                @ThrustUp.canceled -= m_Wrapper.m_LanderActionsCallbackInterface.OnThrustUp;
                @ThrustLeft.started -= m_Wrapper.m_LanderActionsCallbackInterface.OnThrustLeft;
                @ThrustLeft.performed -= m_Wrapper.m_LanderActionsCallbackInterface.OnThrustLeft;
                @ThrustLeft.canceled -= m_Wrapper.m_LanderActionsCallbackInterface.OnThrustLeft;
                @ThrustRight.started -= m_Wrapper.m_LanderActionsCallbackInterface.OnThrustRight;
                @ThrustRight.performed -= m_Wrapper.m_LanderActionsCallbackInterface.OnThrustRight;
                @ThrustRight.canceled -= m_Wrapper.m_LanderActionsCallbackInterface.OnThrustRight;
                @BackToMenu.started -= m_Wrapper.m_LanderActionsCallbackInterface.OnBackToMenu;
                @BackToMenu.performed -= m_Wrapper.m_LanderActionsCallbackInterface.OnBackToMenu;
                @BackToMenu.canceled -= m_Wrapper.m_LanderActionsCallbackInterface.OnBackToMenu;
            }
            m_Wrapper.m_LanderActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ThrustUp.started += instance.OnThrustUp;
                @ThrustUp.performed += instance.OnThrustUp;
                @ThrustUp.canceled += instance.OnThrustUp;
                @ThrustLeft.started += instance.OnThrustLeft;
                @ThrustLeft.performed += instance.OnThrustLeft;
                @ThrustLeft.canceled += instance.OnThrustLeft;
                @ThrustRight.started += instance.OnThrustRight;
                @ThrustRight.performed += instance.OnThrustRight;
                @ThrustRight.canceled += instance.OnThrustRight;
                @BackToMenu.started += instance.OnBackToMenu;
                @BackToMenu.performed += instance.OnBackToMenu;
                @BackToMenu.canceled += instance.OnBackToMenu;
            }
        }
    }
    public LanderActions @Lander => new LanderActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface ILanderActions
    {
        void OnThrustUp(InputAction.CallbackContext context);
        void OnThrustLeft(InputAction.CallbackContext context);
        void OnThrustRight(InputAction.CallbackContext context);
        void OnBackToMenu(InputAction.CallbackContext context);
    }
}
